#Input file name - to be implemented fully later on

sampleName: 'Hrvatin_afteint'   #Enter the part BEFORE file extension (ex. 'data.h5ad' should be entered as 'data')
seededRun: 0 #Use if you want this run of the pipeline to be reproducible

cores:
  #The concurrency of operations are indicated by the number commented to their right.
  #Those with the same numbers have a possiblity to run concurrently
  #Make sure that concurrent sums do not exceed what is defined on runPip.

  pbulks: 32            #1
  c_gen: 32             #1
  CDSeq: 16               #2
  CPM: 16                 #2
  CIBERSORT: 3            #2       #Using more than 3 has no effect
  bseqsc: 3               #2       #Using more than 3 has no effect, uses CIBERSORT internally
  DWLS: 16                #2
  debCAM_unsupervised: 30   #NaN       #Runs last if runs, but fails mostly
  scaleTransform: 32            #3


#pbulk parameters below
pbulkParam:
  pbulkMode: 2  #Different mode for building pbulks
  cellCount: 150000  #How many cells should be used to create a bulk sample
  nSamples: 500  #How many different samples should be generated
  propVar: 450 #Variances inbetween proportions, check vignette (EFFECTIVE IN MODE 2 ONLY, enter negative value to switch to min max prop mode)
  sampleCT: 1 #Sampling for cell types allowed or not (1 or 0) (DEPRECATED)




#Available tests in Seurat:
#   "wilcox"
#   "bimod"
#   "roc"
#   "t"
#   "negbinom"
#   "poisson"
#   "LR"
#   "MAST"
#   "DESeq2"

#Normalizations available in Seurat:
#   LogNormalize
#   CLR # NOT WORKING, DO NOT USE
#   RC
refgenDgeParam:
    test_1: 'bimod'
    test_2: 'wilcox'
    seuratNorm: 'LogNormalize'


#params for scale_transform

#Transform
#   none
#   log
#   sqrt
#   vst (requires high memory)


#scaleC
#   none
#   column
#   row
#   mean
#   column_z-score
#   global_z-score
#   column_min-max
#   global_min-max
#   LogNormalize
#   QN
#   TMM
#   SCTransform (sc-specific)
#   scater (sc-specific)
#   scran (sc-specific)
#   Linnorm (sc-specific)

#scaleT
#   none
#   column
#   row
#   mean
#   column_z-score
#   global_z-score
#   column_min-max
#   global_min-max
#   LogNormalize
#   QN
#   TMM
#   UQ
#   median_ratios

stParam:
  scaleC: SCTransform
  scaleT: TMM
  transform: sqrt
  scaleFirst: 1 #1 = scale first, 0 = transform first


### METHODS ###
## Bulk
# CIBERSORT
# DeconRNASeq
# OLS
# NNLS
# FARDEEP
# RLR
# DCQ
# elasticNET
# lasso
# ridge
# EPIC
# DSA
# ssKL
# ssFrobenius
# dtangle
# deconf
# proportionsInAdmixture
# EpiDISH
# debCAM_unsupervised
# debCAM_marker
# debCAM_C1
# CDSeq

## SC
# MuSiC
# Bisque
# DWLS
# SCDC
# bseqsc
# CPM
# TIMER

# Add or delete//comment the methods below to run them.
deconMethods:
  - CIBERSORT
  - DeconRNASeq
  - OLS
  - NNLS
  - FARDEEP
  - RLR
  - DCQ
  - elasticNET
  - lasso
  - ridge
  - EPIC
  - DSA
  - ssKL
  - ssFrobenius
  - dtangle
  - deconf
  - proportionsInAdmixture
  - EpiDISH
  - debCAM_unsupervised   # remove if giving too many iterations error
  - debCAM_marker
  - debCAM_C1
  - CDSeq
  - MuSiC
  - Bisque
  - DWLS
  - SCDC
  - bseqsc
  - CPM
  - TIMER



#Unsupervised params:
unsupervisedParams:
  expectedTypes: 9  #Unsupervised expected cell type count

#Marker selection params
markerParams:
  topN: 4   #How many top markers to select (AS OF NOW, FOR DEBCAM ONLY)

#Force MuSiC to run with raw counts
forceMuSiCRaw: TRUE #MuSiC originally requires raw counts, but can be made FALSE to test for susceptibility to normalization



### RESULTS ###

## Implemented metrics:
#rmse        (Root Mean Squared Error)
#mdist      (Minkowski Distance, use p=2 for euclidean)
#dcor        (Distance correlation)
#pcor        (Pearson correlation)
#avgcos     (Average cosine similarity, considering each sample as vector of genes)
#mae         (Mean Absolute Error)
#R2          (R-squared)
resMetrics:
  - rmse
  - mdist
  - dcor
  - pcor
  - avgcos
  - mae
  - r2
minkowski_p: 2
